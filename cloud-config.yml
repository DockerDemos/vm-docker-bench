#cloud-config

coreos:
  units:
    - name: format-disk.service
      command: start
      content: |
        [Unit]
        Description=Formats the primary drive
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/sbin/wipefs -f /dev/sda
        ExecStart=/usr/sbin/mkfs.btrfs -f /dev/sda
    - name: var-lib-docker.mount
      command: start
      content: |
        [Unit]
        Description=Mount primary hd to /var/lib/docker
        Requires=format-disk.service
        Before=docker.service
        [Mount]
        What=/dev/sda
        Where=/var/lib/docker
        Type=btrfs

write_files:
  - path: '/bench/bench_boot_ssp.sh'
    permissions: 0755
    content: |
      #!/bin/bash
      #
      # Version 1.0 (2014-06-30)
      #
      # This image was uploaded to our private repository
      # server for ease of testing.
      # It can be built from the Docker files at
      # https://github.com/DockerDemos/vm-docker-bench/tree/master/webbench
      #
      # Starts N number of Docker containers running
      # Apache and a basic PHP "Hello World" file.
      #
      COUNT="$1"
      docker pull $REPO/bench-webbench >> /dev/null
      for i in $(seq 1 $COUNT) ; do docker run -d $REPO/bench-webbench ; done
      
  - path: '/bench/bench_reboot.sh'
    permissions: 0755
    content: |
      #!/bin/bash
      #
      # Version 1.2 (2014-08-28)
      #
      # This image was uploaded to our private repository
      # server for ease of testing.
      # It can be built from the Docker files at
      # https://github.com/DockerDemos/vm-docker-bench/tree/master/webbench
      #
      # Starts 15 of Docker containers running
      # Apache and a basic PHP "Hello World" file.
      #
      COUNT="15"
      docker pull $REPO/webbench
      for n in {1..5} ; do
        for i in $(seq 1 $COUNT) ; do docker run -d $REPO/bench-webbench ; done
        sleep 5m
        docker ps -a | awk '/webbench/ {print $1}' |xargs docker stop
        docker ps -a | awk '/webbench/ {print $1}' |xargs docker rm
        sleep 5m
      done

  - path: '/bench/bench_cpu.sh'
    permissions: 0755
    content: |
      #!/bin/bash
      #
      # Version 1.0 (2014-07-07)
      #
      # This image was uploaded to our private repository 
      # server for ease of testing.
      # It can be built from the Docker files at 
      # https://github.com/DockerDemos/vm-docker-bench\sysbench
      #
      # Tests CPU calculations by running a prime number 
      # calculation benchmark test in 100 Docker 
      # containers, serially.
      docker pull $REPO/bench-sysbench >> /dev/null
      for i in {1..100} ; do docker run --rm -i -t $REPO/bench-sysbench \
      sysbench --test=cpu --cpu-max-prime=20000 run |grep total\ time\: \
      | awk '{print $3}'| sed 's/s//g' ; done

  - path: '/bench/bench_mysql.sh'
    permissions: 0755
    content: |
      #!/bin/bash
      #
      # Version 1.0 (2014-07-10)
      #
      # This image was uploaded to our private repository 
      # server for ease of testing.
      # It can be built from the Docker files at 
      # https://github.com/DockerDemos/vm-docker-bench/tree/master/sysbench-mysql
      #
      # Tests MySQL performance with read, write and transaction
      # tests in 100 Docker containers, serially.
      docker pull $REPO/bench-sysbench-mysql >> /dev/null
      for i in {1..100} ; do docker run --rm -i -t $REPO/bench-sysbench-mysql
      done

  - path: '/bench/bench_mysql_index.sh'
    permissions: 0755
    content: |
      #!/bin/bash
      #
      # Version 1.0 (2014-07-10)
      #
      # This image was uploaded to our private repository
      # server for ease of testing.
      # It can be built from the Docker files at
      # https://github.com/DockerDemos/vm-docker-bench/tree/master/iibench-mysql
      #
      # Tests MySQL Indexed Insertion performance
      # Test runs in 25 Docker containers, serially.
      docker pull $REPO/bench-iibench-mysql
      for i in {1..25} ; do docker run --rm -i -t $REPO/bench-iibench-mysql
      done

  - path: '/bench/bench_io.sh'
    permissions: 0755
    content: |
      #!/bin/bash
      #
      # Version 1.0 (2014-07-07)
      #
      # This image was uploaded to our private repository 
      # server for ease of testing.
      # It can be built from the Docker files at 
      # https://github.com/DockerDemos/vm-docker-bench/tree/master/sysbench
      #
      # Tests disk IO with a combined *Random Read and Write*
      # test in 25 Docker containers, serially.
      # 
      # Writes total transfer speed in Mb/s to stdout
      docker pull $REPO/bench-sysbench >> /dev/null
      for i in {1..25} ; do docker run --rm -i -t $REPO/bench-sysbench \
      /bench/io.sh 5G \
      |awk '/transferred/ {print $8}'| sed 's/[\(\)(Mb/sec)]//g' ; done

  - path: '/bench/bench_io_mod.sh'
    permissions: 0755
    content: |
      #!/bin/bash
      #
      # Version 1.0 (2014-07-07)
      #
      # This image was uploaded to our private repository 
      # server for ease of testing.
      # It can be built from the Docker files at 
      # https://github.com/DockerDemos/vm-docker-bench/tree/master/sysbench
      #
      # Tests disk IO with a combined *Random Read and Write*
      # test in 25 Docker containers, serially, with a 
      # 512MB memory limit enforced on the containers.
      docker pull $REPO/bench-sysbench >> /dev/null
      for i in {1..25} ; do docker run --rm -i -t -m="524288k" $REPO/bench-sysbench \
      /bench/io.sh 5G \
      |awk '/transferred/ {print $8}'| sed 's/[\(\)(Mb/sec)]//g' ; done

  - path: '/bench/bench_app_blog.sh'
    permissions: 0755
    content: |
      #!/bin/bash
      #
      # Version 1.0 (2014-07-11)
      #
      # This image was uploaded to our private repository
      # server for ease of testing.
      # It can be built from the Docker files at
      # https://github.com/DockerDemos/vm-docker-bench/tree/master/blogbench
      #
      # Tests file I/O operations simulating a
      # real-world server.
      # Runs 25 docker containers, serially
      docker pull $REPO/bench-blogbench
      for i in {1..25} ; do docker run --rm -i -t $REPO/bench-blogbench \
      -c 30 -i 20 -r 40 -W 5 -w 5 --directory=/srv ; done

  - path: '/bench/bench_app_ab.sh'
    permissions: 0755
    content: |
      #!/bin/bash
      # This image was uploaded to our private repository
      # server for ease of testing.
      # It can be built from the Docker files at
      # https://github.com/DockerDemos/vm-docker-bench/tree/master/webbench
      #
      # Starts N number of Docker containers running
      # Apache and a basic PHP "Hello World" file.
      #
      docker pull $REPO/bench-webbench >> /dev/null
      docker run --rm -d -p 80:80 $REPO/bench-webbench

  - path: '/bench/bench_clear_cache.sh'
    permissions: 0755
    content: |
      #!/bin/bash
      #
      # Shamelessly stolen from https://github.com/bodenr
      #
      # https://github.com/bodenr/cloudy-docker-kvm-bench/blob/master/bin/clrc.sh

      sync

      echo 3 > /proc/sys/vm/drop_caches

  - path: '/bench/mon-cpu.sh'
    permissions: 0775
    content: |
      #!/bin/sh
      #
      # Version 1.1 (2014-07-07)
      #
      # What:          /proc/stat
      # Description:
      #   user: normal processes executing in user mode
      #   nice: niced processes executing in user mode
      #   system: processes executing in kernel mode
      #   idle: twiddling thumbs
      #   iowait: waiting for I/O to complete
      #   irq: servicing interrupts
      #   softirq: servicing softirqs
      #   steal: involuntary wait
      POLLING="$1"
      HOSTNAME="$(hostname)"
      DATE="$(date '+%Y%m%d')"

      echo 'x,user,nice,system,idle,iowait,irq,softirq,steal,guest,guest_nice'

      while true ; do
        echo "$(cat /proc/stat |head -n 1\
        |sed -e 's/^[ \t]*//' | sed -e 's/[ ][ ]*/,/g')"
        sleep $POLLING 
      done

  - path: '/bench/mon-mem.sh'
    permissions: 0775
    content: |
      #!/bin/sh
      #
      # Version 1.1 (2014-07-07)
      #
      # What:       `free`
      # Description:
      #    total:   Full amount of memory allocated to the server
      #    used:    Total memory used, including buffers and cache
      #    free:    Memory available, and not being used for buffers or cache
      #    shared:  Memory used and available to multiple CPUs
      #    buffers: Memory dedicated to cache disk block devices
      #    cached:  Memory dedicated to caching pages from file reads
      POLLING="$1"

      echo 'total,used,free,shared,buffers,cached'

      while true; do
        free -m |awk '/Mem/ { OFS = ","; print $2, $3, $4, $5, $6, $7}'
        sleep $POLLING 
      done
